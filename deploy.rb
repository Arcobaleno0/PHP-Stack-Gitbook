#!/usr/bin/env ruby

require 'dotenv'

require 'optparse'
require 'fileutils'

require 'rubygems'
require 'bundler/setup'

require 'aws-sdk'
require 'mime/types'

# Load env values first!
Dotenv.load

class S3FolderUpload
  attr_reader :folder_path, :total_files, :s3_bucket
  attr_accessor :files

  # Initialize the upload class
  #
  # folder_path - path to the folder that you want to upload
  # bucket - The bucket you want to upload to
  # aws_key - Your key generated by AWS defaults to the environemt setting AWS_KEY_ID
  # aws_secret - The secret generated by AWS
  #
  # Examples
  #   => uploader = S3FolderUpload.new("some_route/test_folder", 'your_bucket_name')
  #
  def initialize(folder_path, bucket, aws_key = ENV['AWS_ACCESS_KEY_ID'], aws_secret = ENV['AWS_SECRET_ACCESS_KEY'])
    @folder_path = folder_path
    @files       = Dir.glob "#{@folder_path}/**/{*,.*}"
    @connection  = Aws::S3::Resource.new(access_key_id: aws_key, secret_access_key: aws_secret, region: 'us-east-1')
    @s3_bucket   = @connection.bucket(bucket)
  end

  # public: Upload files from the folder to S3
  def upload!()
    file_number = 0

    total_files = @files.length

    @files.each do |file|
      file_number += 1

      print "\rUploading... [#{file_number}/#{total_files}]"

      next if File.directory? file

      # Get the path relative to containing directory
      path = file.gsub(/^#{@folder_path}\//, '')

      options = { :acl => "authenticated-read" }

      if MIME::Types.type_for(file).count > 0
        options[:content_type] = MIME::Types.type_for(file).first.to_str
      end

      @s3_bucket.object(path).upload_file(file, options)
    end

    puts "\rUpload complete!".ljust 80
  end

  # Delete files from S3 not included in path
  def cleanup!
    @s3_bucket.objects.each do |obj|
      if !@files.include? "#{@folder_path}/#{obj.key}"
        puts "Deleting #{obj.key}"
        obj.delete
      end
    end
  end
end

# Parse CLI Options
options = {
  :bucket     => ENV['BUCKET'],
  :build_dir  => 'build',
  :aws_key    => ENV['AWS_ACCESS_KEY_ID'],
  :aws_secret => ENV['AWS_SECRET_ACCESS_KEY']
}

parser = OptionParser.new do |opts|
  opts.on('-b', '--bucket=BUCKET', "S3 Bucket to deploy to (Required, default: \"#{options[:bucket]}\")") do |b|
    options[:bucket] = b
  end

  opts.on('-o', '--output_dir=DIRECTORY', "Build directory (Default: \"#{options[:build_dir]}\")") do |o|
    options[:build_dir] = o
  end

  opts.on('-k', '--aws_key=KEY', "AWS Upload Key (Required, default: \"#{options[:aws_key]}\")") do |k|
    options[:aws_key] = k
  end

  opts.on('-s', '--aws_secret=SECRET', "AWS Upload Secret (Required, default: \"#{options[:aws_secret]}\")") do |s|
    options[:aws_secret] = s
  end

  opts.on_tail('-h', '--help', 'Display this help') do
    puts opts
    exit
  end
end

parser.parse!

if options[:bucket] == nil || options[:aws_key] == nil || options[:aws_secret] == nil
  puts parser
  exit
end

# Build book
abort 'Failed to install book requirements' unless system 'gitbook', 'install', 'book'
abort 'Failed to build book!' unless system 'gitbook', 'build', 'book', options[:build_dir], '--format', 'website'

# Strip double slashes
gitbook_css = File.join(options[:build_dir], 'gitbook', '*.css')

Dir.glob gitbook_css do |css|
  puts "Removing double slash from #{css}"

  f = File.new(css, 'r+')

  content = f.read.gsub(/\.\/\/fonts/, "./fonts")

  f.truncate 0
  f.rewind

  f.write content
end

# Deploy
uploader = S3FolderUpload.new(options[:build_dir], options[:bucket], options[:aws_key], options[:aws_secret])
uploader.upload!
uploader.cleanup!

# Cleanup build directory
FileUtils.remove_dir options[:build_dir]
